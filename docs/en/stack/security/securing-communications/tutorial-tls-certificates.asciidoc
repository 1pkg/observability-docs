[role="xpack"]
[testenv="trial"]
[[encrypting-communications-certificates]]
=== Generate certificates

In a secured cluster, {es} nodes use certificates to identify themselves when
communicating with other nodes. 

The cluster must validate the authenticity of these certificates. The 
recommended approach is to trust a specific certificate authority (CA). Thus 
when nodes are added to your cluster they just need to use a certificate signed 
by the same CA. 

. Use the `elasticsearch-certutil` command to generate a CA and certificates and
private keys for each node in your cluster. 
+
--
You can let the tool prompt you for information about each node in your cluster,
or you can supply that information in an input file. For example, create a
`test-cluster.yml` file in one of your {es} nodes:

[source,yaml]
----
instances:
  - name: "node-1" <1>
    dns: 
      - "node1.local"
  - name: "node-2"
    dns:
      - "node2.local"
  - name: "node-3"
    dns:
      - "node3.local"
----
<1> If these `name` values match the values you specified for `node.name` in
each `elasticsearch.yml` file, you can take use a shortcut in subsequent steps. 

For information about all of the possible fields in this file, see 
{ref}/certutil.html#certutil-silent[Using elasticsearch-certutil in silent mode].

Then run the following command:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-certutil cert --in test-cluster.yml --keep-ca-key
----------------------------------------------------------------------
// NOTCONSOLE

The command prompts you for passwords to secure each output file. You can leave
the passwords blank by pressing *Enter*. However, it is wise to store these files
securely, especially the CA, since it holds the key to your cluster. 

It is also possible to use a commercial or organization-specific CA. However,
that scenario is not covered in this tutorial. See the `csr` option in
the {ref}/certutil.html[elasticsearch-certutil] command. 
--

. Decompress the `certificate-bundle.zip` file.
+
--
For example:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
unzip certificate-bundle.zip 

Archive:  certificate-bundle.zip
   creating: ca/
  inflating: ca/ca.p12               
   creating: node-1/
  inflating: node-1/node-1.p12       
   creating: node-2/
  inflating: node-2/node-2.p12       
   creating: node-3/
  inflating: node-3/node-3.p12  
----------------------------------------------------------------------
// NOTCONSOLE
  
The `certificate-bundle.zip` file contains a folder for each of your nodes and a
`ca` folder.

The `ca` folder contains a `ca.p12` file, which is a PKCS#12 keystore. This file
contains the public certificate for your certificate authority and the private
key that is used to sign the node certificates.

Each node folder contains a single PKCS#12 keystore that includes a node 
certificate, node key, and CA certificate. You can alternatively generate 
Privacy Enhanced Mail (PEM) formatted certificates and keys, though that option 
is not covered in this tutorial.
--

. (Optional) Create a folder to contain certificates in the configuration
directory on each {es} node. For example, create a `certs` folder in the `config`
directory on each node.

. Copy the appropriate certificate to the configuration directory on each {es} 
node. For example, copy the `node-1.p12` file into the `config/certs` directory
on the first node. Copy the `node-2.p12` file to the second node and the
`node-3.p12` to the third.

If you later add more nodes, they just need to use a certificate signed by the
same CA. For example: 

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-certutil cert --ca ca/ca.p12 \ <1>
--dns <domain_name> <2> --ip <ip_addresses> <3>
----------------------------------------------------------------------
// NOTCONSOLE
<1> The certificate authority that you generated for this cluster.
<2> A comma-separated list of DNS names for the new {es} node.
<3> A comma-separated list of IP addresses for the new {es} node.
 