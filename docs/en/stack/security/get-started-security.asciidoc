[[get-started-elastic-stack-security]]
== Getting started with security

In this tutorial, you learn how to secure a cluster by configuring users and 
roles for use in {es}, {kib}, {ls}, and {metricbeat}. 

[float]
[[gs-security-prereqs]]
=== Before you begin

Install and start {es}, {kib}, {ls}, and {metricbeat} as described in 
<<get-started-elastic-stack>>. 

Launch the {kib} web interface by pointing your browser to port 5601. For 
example, http://127.0.0.1:5601[http://127.0.0.1:5601].

[float]
[[gs-security-license]]
=== Install a trial license

When you installed the products, they applied Basic licenses with no expiration 
dates. To view your license in {kib}, go to **Management** and click 
**License Management**.

[role="screenshot"]
image::images/management-license.png["License management screenshot in Kibana"]

To secure your cluster, you must obtain a license that includes the {security} 
features. For more information about Elastic license levels, see 
https://www.elastic.co/subscriptions.

You can start a 30-day trial to try out all of the Platinum features, including 
{security}. Click **Start trial**.

IMPORTANT: If your cluster has already activated a trial license for the current 
major version, you cannot start a new trial. For example, if you have already 
activated a trial for v6.0, you cannot start a new trial until v7.0.

At the end of the trial period, your license reverts to a Basic license. If you 
want to keep using the extra features, you can purchase a subscription. 

[float]
[[gs-security-enabled]]
=== Enable security in {es}

When you use the trial license, {security} is disabled by default. You must 
stop {kib}, stop {es}, then add the `xpack.security.enabled` setting to the 
`config/elasticsearch.yml` file in your {es} directory. For example:

[source,yaml]
----
xpack.security.enabled: true
----

[float]
[[gs-built-in-users]]
=== Create passwords for built-in users

There are built-in users that you can use for specific administrative purposes:
`elastic`, `kibana`, `logstash_system`, and `beats_system`. 

Before you can use them, you must set their passwords. Restart {es}, then run 
the following command from the {es} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
bin/elasticsearch-setup-passwords interactive
----------------------------------------------------------------------

You will use these users in subsequent steps, so choose passwords that you can 
remember!

[float]
[[gs-kibana-security]]
=== Add the built-in user to {kib}

When {security} is enabled, users must log in to {kib} with a valid user ID and 
password. 

{kib} also performs some tasks under the covers, which require use of the 
built-in `kibana` user. Uncomment and update the following settings in the 
`config/kibana.yml` file in your {kib} directory:

[source,yaml]
----
elasticsearch.username: "kibana"
elasticsearch.password: "your_password"
----

Specify the password that you set with the `elasticsearch-setup-passwords` 
command. 

Save your changes to the file and restart {kib}.

[float]
[[gs-realms]]
=== Configure authentication

Now that you've set up the built-in users, you need to decide how you want to 
manage all of the other users. 

The {stack} _authenticates_ users to ensure that they are valid. The 
authentication process is handled by _realms_. You can use one or more built-in 
realms, such as the native, file, LDAP, PKI, Active Directory, or SAML realms. 
Alternatively, you can create your own custom realms. In this tutorial, we'll  
use a native realm. 

In general, you configure realms by adding `xpack.security.authc.realms` 
settings in the `elasticsearch.yml` file. However, the native realm is available 
by default when no other realms are configured. Therefore, you don't need to do 
any extra configuration steps in this tutorial. You can jump straight to 
creating users. 

If you want to learn more about authentication and realms, see 
<<setting-up-authentication>>.

[float]
[[gs-users]]
=== Create users in {kib}

Log in to {kib} with the `elastic` built-in user. 

Go to the *Management / Security / Users* page:

[role="screenshot"]
image::security/images/management-builtin-users.jpg["User management screenshot in Kibana"]

In this example, you can see all of the built-in users. 

Click *Create user* to make a new user. For example, create a user for yourself:

[role="screenshot"]
image::security/images/management-create-user.jpg["Creating a user in Kibana"]

You'll notice that when you create a user, you can assign it a _role_, such as 
`kibana_user`. The {stack} uses roles to _authorize_ users. For example, you can 
authorize a user to perform specific actions (such as read, create, or manage) 
on specific secured resources (such as indices, aliases, documents, fields, or 
clusters). 

To help you get up and running, there are built-in roles. Go to the 
*Management / Security / Roles* page to see them:

[role="screenshot"]
image::security/images/management-roles.jpg["Role management screenshot in Kibana"]

Select a role to see more information about what privileges it provides. For 
example, if you select the `kibana_user` role, you will see that it grants 
`manage`, `read`, `index`, and `delete` privileges on the `.kibana*` indices. 

If you want to learn more about authorization and roles, see <<authorization>>.

[float]
[[gs-roles]]
=== Create roles in {kib}

If you completed all of the steps in <<get-started-elastic-stack>>, you should 
have {metricbeat} data stored in {es}. Let's create a role that grants access to 
that data. 

Go to the *Management / Security / Roles* page and click *Create role*. 

[role="screenshot"]
image::security/images/management-create-role.jpg["Creating a role in Kibana"]

Create a `metricbeat_reader` role that has `read` and `view_index_metadata` 
privileges on the `metricbeat-*` indices. 

Now go back to the *Management / Security / Users* page, select your user, and 
add the new `metricbeat_reader` role to your user. 

The list of users should now contain all of the built-in users as well as the 
one you created. It should also show that your user has two roles:

[role="screenshot"]
image::security/images/management-users.jpg["User management screenshot in Kibana"]

////
2. Configure security in {es}. Encrypt inter-node communications, set passwords for the built-in users, and manage your users and roles.
2.2. Configure TLS
2.2.1 Generate node certificates.
2.2.2 Enable TLS on each node.
2.5. Configure native realm
2.6. Create roles. 
2.7. Optional: Enable auditing
3. Configure security in {kib}. Set the authentication credentials in Kibana and encrypt communications between the browser and the Kibana server.
3.1. Update kibana.yml with the built-in user
3.2. Set xpack.security.encryptionKey.
3.3. Configure TLS
3.4. Grant users access to the indices that they will be working with. 
3.5. Verify login.
4. Configure security in {ls}. Set the authentication credentials for Logstash and encrypt communications between Logstash and Elasticsearch.
4.1. Create logstash_writer role and logstash_internal user.
4.2. Configure {ls} to use the logstash_internal user. 
4.3. Configure TLS.
4.4. Grant access to {ls} indices
5. Configure security in {metricbeat}. Configure authentication credentials and encrypt connections to Elasticsearch.
5.1. Configure permissions for XXX user
5.2. Grant access to {metricbeat} indices
5.3. Enable HTTPS in the {metricbeat} configuration
5.4. Create and assign metricbeat_writer and metricbeat_reader roles.  
6.1. Note additional options for configuring security in Kibana (e.g. xpack.security.* settings)
////