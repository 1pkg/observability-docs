[role="xpack"]
[[security-getting-started]]
== Getting started with security

In this tutorial, you learn how to secure a cluster by configuring users and 
roles for use in {es}, {kib}, {ls}, and {metricbeat}. 

[float]
[[gs-security-prereqs]]
=== Before you begin

Install and start {es}, {kib}, {ls}, and {metricbeat} as described in 
<<get-started-elastic-stack>>. 

Launch the {kib} web interface by pointing your browser to port 5601. For 
example, http://127.0.0.1:5601[http://127.0.0.1:5601].

[float]
[[gs-security-license]]
=== Install a trial license

When you installed the products, they applied Basic licenses with no expiration 
dates. To view your license in {kib}, go to **Management** and click 
**License Management**.

[role="screenshot"]
image::images/management-license.png["License management screenshot in Kibana"]

To secure your cluster, you must obtain a license that includes the {security} 
features. For more information about Elastic license levels, see 
https://www.elastic.co/subscriptions.

You can start a 30-day trial to try out all of the Platinum features, including 
{security}. Click **Start trial**.

IMPORTANT: If your cluster has already activated a trial license for the current 
major version, you cannot start a new trial. For example, if you have already 
activated a trial for v6.0, you cannot start a new trial until v7.0.

At the end of the trial period, the Platinum features operate in a 
<<license-expiration,degraded mode>>. You can revert to a Basic license, extend 
the trial, or purchase a subscription. 

[float]
[[gs-security-enabled]]
=== Enable security in {es}

When you use the trial license, {security} is disabled by default. To enable it:

. Stop {kib}. The method for starting and stopping products varies depending on 
how you installed them. For example, if you installed {kib} with a `.tar.gz` package, 
you can stop it by entering `Ctrl-C` on the command line where it is running.

. Stop {es}. For example, if you installed {es} with a `.tar.gz` package, stop 
it by entering `Ctrl-C` on the command line where it is running.

. Add the `xpack.security.enabled` setting to the 
`ES_PATH_CONF/elasticsearch.yml` file. 
+
--
TIP: The `ES_PATH_CONF` environment variable contains the path for the {es} 
configuration files. If you installed {es} using archive distributions (`zip` or 
`tar.gz`), it defaults to `ES_HOME/config`. If you used package distributions 
(Debian or RPM), it defaults to `/etc/elasticsearch`. For more information, see 
{ref}/settings.html[Configuring {es}].  

For example, add the following setting:

[source,yaml]
----
xpack.security.enabled: true
----

--

NOTE: This tutorial involves a single node cluster, but if you had multiple 
nodes, you would enable {security} on every node in the cluster and configure 
Transport Layer Security (TLS) for internode-communication, which is beyond the 
scope of this tutorial. 

When you enable {security}, basic authentication is enabled by default. To 
communicate with the cluster, you must specify a username and password.
Unless you <<anonymous-access,enable anonymous access>>, all requests that don't 
include a user name and password are rejected.

[float]
[[gs-built-in-users]]
=== Create passwords for built-in users

There are built-in users that you can use for specific administrative purposes:
`elastic`, `kibana`, `logstash_system`, and `beats_system`. 

Before you can use them, you must set their passwords:

. Restart {es}. For example, if you installed {es} with a `.tar.gz` package, run 
the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch
----------------------------------------------------------------------
--

. Set the built-in users' passwords. Run the following command from the {es} 
directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-setup-passwords interactive
----------------------------------------------------------------------
--

You need these built-in users in subsequent steps, so choose passwords that you 
can remember!

NOTE: This tutorial does not use the built-in `logstash_system` and 
`beats_system` users, which are typically associated with monitoring. For more 
information, see 
{logstash-ref}/ls-security.html#ls-monitoring-user[Configuring credentials for {ls} monitoring]
and {metricbeat-ref}/monitoring.html[Monitoring {metricbeat}].  
  
[float]
[[gs-kibana-security]]
=== Add the built-in user to {kib}

When {security} is enabled, users must log in to {kib} with a valid user ID and 
password. 

{kib} also performs some tasks under the covers, which require use of the 
built-in `kibana` user. Uncomment and update the following settings in the 
`kibana.yml` file in your {kib} directory:

TIP: If you installed {kib} using archive distributions (`zip` or 
`tar.gz`), the `kibana.yml` configuration file is in `KIBANA_HOME/config`. If 
you used package distributions (Debian or RPM), it's in `/etc/kibana`. For more 
information, see {kibana-ref}/settings.html[Configuring {kib}].  

For example, add the following settings:

[source,yaml]
----
elasticsearch.username: "kibana"
elasticsearch.password: "your_password"
----

Specify the password that you set with the `elasticsearch-setup-passwords` 
command then save your changes to the file. 

If you prefer not to put your password in the `kibana.yml` file, remove those 
settings and store them in a keystore instead. Run the following commands to 
create the {kib} keystore and add the secure settings:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/kibana-keystore create
./bin/kibana-keystore add elasticsearch.username
./bin/kibana-keystore add elasticsearch.password
----------------------------------------------------------------------

When prompted, specify the `kibana` built-in user and its password for these 
setting values.  The settings are automatically applied when you start {kib}.   
To learn more, see {kibana-ref}/secure-settings.html[Secure settings].

Restart {kib}. For example, if you installed 
{kib} with a `.tar.gz` package, run the following command from the {kib} 
directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/kibana
----------------------------------------------------------------------

[float]
[[gs-realms]]
=== Configure authentication

Now that you've set up the built-in users, you need to decide how you want to 
manage all the other users. 

The {stack} _authenticates_ users to ensure that they are valid. The 
authentication process is handled by _realms_. You can use one or more built-in 
realms, such as the native, file, LDAP, PKI, Active Directory, or SAML realms. 
Alternatively, you can create your own custom realms. In this tutorial, we'll  
use a native realm. 

In general, you configure realms by adding `xpack.security.authc.realms` 
settings in the `elasticsearch.yml` file. However, the native realm is available 
by default when no other realms are configured. Therefore, you don't need to do 
any extra configuration steps in this tutorial. You can jump straight to 
creating users!

If you want to learn more about authentication and realms, see 
<<setting-up-authentication>>.

[float]
[[gs-users]]
=== Create users

Log in to {kib} with the `elastic` built-in user. 

Go to the *Management / Security / Users* page:

[role="screenshot"]
image::security/images/management-builtin-users.jpg["User management screenshot in Kibana"]

In this example, you can see all of the built-in users. 

Click *Create user* to make a new user. For example, create a user for yourself:

[role="screenshot"]
image::security/images/create-user.jpg["Creating a user in Kibana"]

You'll notice that when you create a user, you can assign it a role. Don't 
choose a role yet--we'll come back to that in subsequent steps.  

In <<get-started-elastic-stack>>, you configured {ls} to listen for {metricbeat} 
input and to send the events to {es}.  You therefore need to create a user 
that {ls} and {metricbeat} can use to communicate with {es}. Click *Create user* 
and create a `metricbeat_internal` user, for example:

[role="screenshot"]
image::security/images/create-metricbeat-user.jpg["Creating a {metricbeat} user in {kib}"]

[float]
[[gs-roles]]
=== Assign roles

By default, all users can change their own passwords, get information about 
themselves, and run the `authenticate` API. If you want them to do more than 
that, you need to give them one or more _roles_. 

Each role defines a specific set of actions (such as read, create, or delete) 
that can be performed on specific secured resources (such as indices, aliases, 
documents, fields, or clusters). To help you get up and running, there are 
built-in roles. 

Go to the *Management / Security / Roles* page to see them:

[role="screenshot"]
image::security/images/management-roles.jpg["Role management screenshot in Kibana"]

Select a role to see more information about its privileges. For example, if you 
select the `kibana_user` role, you will see that it grants `manage`, `read`, 
`index`, and `delete` privileges on the `.kibana*` indices. To learn more about 
these privileges, see <<privileges-list-indices>>. 

Let's assign the `kibana_user` role to your user. Go back to the 
*Management / Security / Users* page and select your user. Add the `kibana_user` 
role and save the change. For example:

[role="screenshot"]
image::security/images/assign-role.jpg["Assigning a role to a user in Kibana"]

This user now has the minimum privileges required to use {kib}. 

If you completed all of the steps in <<get-started-elastic-stack>>, you should 
have {metricbeat} data stored in {es}. Let's create two roles that grant 
different levels of access to that data. 

Go to the *Management / Security / Roles* page and click *Create role*. 

Create a `metricbeat_reader` role that has `read` and `view_index_metadata` 
privileges on the `metricbeat-*` indices:

[role="screenshot"]
image::security/images/create-reader-role.jpg["Creating a role in Kibana"]

Create a `metricbeat_writer` role that has `manage_index_templates` and `monitor` 
cluster privileges, as well as `write`, `delete`, and `create_index` privileges
on the `metricbeat-*` indices:

// TBD: The Beats docs don't mention the need for the delete privilege, whereas 
// the Logstash docs do. Which should be used in this case?

[role="screenshot"]
image::security/images/create-writer-role.jpg["Creating another role in Kibana"]

Now go back to the *Management / Security / Users* page and assign these roles 
to the appropriate users. Assign the `metricbeat_reader` role to your personal 
user.  Assign the `metricbeat_writer` role to the `metricbeat_internal` user.

The list of users should now contain all of the built-in users as well as the 
two you created. It should also show the appropriate roles for your users:

[role="screenshot"]
image::security/images/management-users.jpg["User management screenshot in Kibana"]

If you want to learn more about authorization and roles, see <<authorization>>.

[float]
[[gs-logstash-security]]
=== Add users in {ls}

In order for {ls} to send data successfully to {es}, you must configure its 
authentication credentials. You must configure credentials separately for each 
of the {es} plugins in your {ls} configuration file.  For example, update the `demo-metrics-pipeline.conf` file in your {ls} directory:

[source,ruby]
----
input {
  beats {
    port => 5044
  }
}

filter {
  if [system][process] {
    if [system][process][cmdline] {
      grok {
        match => {
          "[system][process][cmdline]" => "^%{PATH:[system][process][cmdline_path]}"
        }
        remove_field => "[system][process][cmdline]"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "metricbeat_internal" <1>
    password => "your_password" <2>
  }
}
----
<1> Specify the `metricbeat_internal` user that you created earlier in this tutorial. 
<2> Specify the password that you chose for this user ID.

Start {ls} by using the appropriate method for your environment. For example, if 
you installed {ls} with a `.tar.gz` package, run the following command from the 
{ls} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/logstash -f demo-metrics-pipeline.conf
----------------------------------------------------------------------

For more methods to start {ls}, see <<gs-start-logstash>>.   

[float]
[[gs-metricbeat-security]]
=== Add users in {metricbeat}

If you were connecting directly from {metricbeat} to {es}, you would need to 
configure authentication credentials for the {es} output in the {metricbeat} 
configuration file. 

In <<get-started-elastic-stack>>, however, you configured {metricbeat} to send 
the data to {ls} for additional parsing, so no extra settings are required in 
{metricbeat}. 

Start {metricbeat} by using the appropriate method for your environment. For 
example, on macOS, run the following command from the {metricbeat} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./metricbeat -e
----------------------------------------------------------------------

For more methods, see <<gs-start-metricbeat,start {metricbeat}>>. 

[float]
[[gs-view-security]]
=== View system metrics in {kib}

Log in to {kib} with the user ID that has `metricbeat_reader` role (for example, 
`jdoe`). 

You should be able to see the system metrics (for example, on 
the *Discover* page or in the 
http://localhost:5601/app/kibana#/dashboard/Metricbeat-system-overview[{metricbeat} system overview dashboard]). 

[float]
[[gs-security-nextsteps]]
=== What's next?

Congratulations! You've successfully set up authentication and authorization by 
using the native realm. You learned how to create user IDs and roles that 
prevent unauthorized access to the {stack}. 

Next, you'll want to try other features that are unlocked by your trial license, 
such as {ml}. See <<ml-getting-started,Getting started with {ml}>>. 

Later, when you're ready to increase the number of nodes in your cluster or set 
up an production environment, you'll want to encrypt communications across the 
{stack}. To learn how, read <<encrypting-communications>>. 

For more detailed information about securing the {stack}, see:

* {ref}/configuring-security.html[Configuring security in {es}]. Encrypt 
inter-node communications, set passwords for the built-in users, and manage your 
users and roles.  

* {kibana-ref}/using-kibana-with-security.html[Configuring security in {kib}]. 
Set the authentication credentials in {kib} and encrypt communications between 
the browser and the {kib} server.

* {logstash-ref}/ls-security.html[Configuring security in Logstash]. Set the 
authentication credentials for Logstash and encrypt communications between 
Logstash and {es}. 

* <<beats,Configuring security in the Beats>>. Configure authentication 
credentials and encrypt connections to {es}. 

* <<java-clients,Configuring the Java transport client to use encrypted communications>>.

* {hadoop-ref}/security.html[Configuring {es} for Apache Hadoop to use secured transport]. 

